#version 410 core
#extension GL_ARB_separate_shader_objects : enable

struct PointLight
{
    vec3 color;
    float strength;
};

struct DirectionalLight {
    vec3 direction;
    vec3 color;
};

struct Material
{
    sampler2D albedo;
    sampler2D ao;
    sampler2D normal;
    sampler2D specular;
};

layout (location=0) in vec3 fragmentPosition;
layout (location=1) in vec2 fragmentTexCoord;
layout (location=2) in vec3 fragmentViewPos;
layout (location=3) in vec3 fragmentLightPos[8];
layout (location=4) in vec4 fragmentPosLightSpace;

uniform Material material;
uniform sampler2D shadowMap;
uniform PointLight lights[8];
uniform DirectionalLight sun;
uniform vec3 ambient;

layout (location=0) out vec4 color;

vec3 calculatePointLight(PointLight light, vec3 normal, vec3 lightPos, vec3 viewDir);
vec3 calculateDirectionalLight(DirectionalLight light, vec3 normal, vec3 viewDir);
float calculateShadow(vec4 fragmentPosLightSpace, vec3 normal) ;

void main()
{
    vec3 normal = -normalize(vec3(1.0) - 2.0 * texture(material.normal, fragmentTexCoord).xyz);
    vec3 viewDir = normalize(fragmentViewPos - fragmentPosition);
    //окружающее освещение - ambient
    vec3 lightLevel = ambient * vec3(texture(material.albedo, fragmentTexCoord));
    lightLevel = lightLevel * texture(material.ao, fragmentTexCoord).xyz;

    //солнечный свет
    float shadow = calculateShadow(fragmentPosLightSpace, normal);
    lightLevel += (1.0 - shadow) * calculateDirectionalLight(sun, normal, viewDir);
    
    for (int i = 0; i < 8; i++)
    {
        float distance = length(fragmentLightPos[i] - fragmentPosition);
        lightLevel += calculatePointLight(lights[i], normal, fragmentLightPos[i], viewDir) / distance;
    }

    color = vec4(lightLevel, 1.0);
}

vec3 calculatePointLight(PointLight light, vec3 normal, vec3 lightPos, vec3 viewDir)
{
    vec3 result = vec3(0.0);

    //направления
    normal = normalize(normal);
    vec3 lightDir = normalize(lightPos - fragmentPosition);
    vec3 halfVec = normalize(lightDir + viewDir);

    //рассеяное освещение - diffuse
    result += max(0.0, dot(normal, lightDir)) * light.color * light.strength * vec3(texture(material.albedo, fragmentTexCoord));

    //блик - specular
    result += light.strength * pow(max(dot(normal, halfVec), 0.0), 32) * light.color * vec3(texture(material.specular, fragmentTexCoord));

    return result;
}

vec3 calculateDirectionalLight(DirectionalLight light, vec3 normal, vec3 viewDir)
{
    vec3 result = vec3(0.0);

    //направления
    normal = normalize(normal);
    vec3 lightDir = normalize(-light.direction);
    vec3 reflectedDir = reflect(-lightDir, normal);

    result += light.color * max(0.0, dot(normal, lightDir)) * vec3(texture(material.albedo, fragmentTexCoord));
    result += light.color * pow(max(dot(viewDir, reflectedDir), 0.0), 32) * vec3(texture(material.specular, fragmentTexCoord));
    // vec3 halfVec = normalize(lightDir + viewDir);

    // //рассеяное освещение - diffuse
    // result += max(0.0, dot(normal, lightDir)) * light.color * vec3(texture(material.albedo, fragmentTexCoord));

    // //блик - specular
    // result += pow(max(dot(normal, halfVec), 0.0), 32) * light.color * vec3(texture(material.specular, fragmentTexCoord));

    return result;
}

float calculateShadow(vec4 fragmentPosLightSpace, vec3 normal) 
{
    vec3 projCoords = fragmentPosLightSpace.xyz / fragmentPosLightSpace.w;
    projCoords = projCoords * 0.5 + 0.5;
    float closestDepth = texture(shadowMap, projCoords.xy).r;
    float currentDepth = projCoords.z;

    //vec3 normal = -normalize(vec3(1.0) - 2.0 * texture(material.normal, fragmentTexCoord).xyz);
    vec3 lightDir = normalize(sun.direction - fragmentPosition);
    float bias = max(0.05 * (1.0 - dot(normal, lightDir)), 0.005);

    float shadow = 0.0;
    vec2 texelsize = 1.0 / textureSize(shadowMap, 0);
    for (int x = -1; x <= 1; ++x)
    {
        for (int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelsize).r;
            shadow += currentDepth - 0.005 > pcfDepth ? 1.0 : 0.0;
        }
    }
    shadow /= 9.0;

    if (projCoords.z > 1.0) {
        shadow = 0.0;
    }

    //float shadow = currentDepth > closestDepth ? 1.0 : 0.0;

    return shadow;
}

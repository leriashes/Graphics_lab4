#version 410 core
#extension GL_ARB_separate_shader_objects : enable

layout (location=0) in vec3 vertexPos;
layout (location=1) in vec2 vertexTexCoord;
layout (location=2) in vec3 vertexNormal;
layout (location=3) in vec3 vertexTangent;
layout (location=4) in vec3 vertexBitangent;

uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform vec3 cameraPos;
uniform vec3 lightPos[8];
uniform mat4 lightSpaceTransform;

out vec3 fragmentPosition;
out vec2 fragmentTexCoord;
out vec3 fragmentViewPos;
out vec3 fragmentLightPos[8];
out vec4 fragmentPosLightSpace;

void main()
{
    gl_Position = projection * view * model * vec4(vertexPos, 1.0);
    
    vec3 T = normalize(vec3(model * vec4(vertexTangent, 0.0)));
    vec3 B = normalize(vec3(model * vec4(vertexBitangent, 0.0)));
    vec3 N = normalize(vec3(model * vec4(vertexNormal, 0.0)));
    mat3 TBN = transpose(mat3(T, B, N));


    vec3 fragPos = vec3(model * vec4(vertexPos, 1.0));
    fragmentPosLightSpace = lightSpaceTransform * vec4(fragPos, 1.0);

    fragmentPosition = TBN * fragPos;
    fragmentTexCoord = vertexTexCoord;
    fragmentViewPos = TBN * cameraPos;
    for (int i = 0; i < 8; i++) {
        fragmentLightPos[i] = TBN * lightPos[i];
    }

}
